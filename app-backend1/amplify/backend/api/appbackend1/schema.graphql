# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Query {
  findblog(blogid: String): String @function(name: "findBlog2-${env}") @auth(rules: [{ allow: private }])
}

type Mutation {
  updateBlogName(blogid: String, blogName: String): String @function(name: "updateBlogName-${env}") @auth(rules: [{ allow: private }])
}

type Blog @model @searchable @auth(
  rules: [
    { allow: owner, identityClaim: "username" },
    #{ allow: groups, groups: ["Moderators"] },
    { allow: groups, groups: ["Reviewers"], groupClaim: "groups" }
  ]
) {
  id: ID!
  owner: String
  name: String!
  posts: [Post] @hasMany
  category: String!
  tag: String
  author: ID! @index(name: "byAuthor", queryField: "blogByAuthor")
}

type Post @model @searchable @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  title: String!
  blog: Blog @belongsTo
  comments: [Comment] @hasMany
  tags: [Tag] @manyToMany(relationName: "PostTags")
  category: String
  author: ID! @index(name: "byAuthor", queryField: "postByAuthor")
}

type Tag @model @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  label: String!
  posts: [Post] @manyToMany(relationName: "PostTags")
}

type Comment @model @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  post: Post @belongsTo
  content: String!
}

type User @model @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  firstName: String!
  lastName: String!
  email: AWSEmail
  team: String
}

type User2 @model @searchable @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  firstName: String!
  lastName: String!
  email: AWSEmail
  team: String @index(name: "byTeam", queryField: "user2ByTeam")
  location: String
}

type Author @model @searchable @auth(
  rules: [
    { allow: owner, identityClaim: "username" }
  ]
) {
  id: ID!
  owner: String
  firstName: String!
  lastName: String!
  email: AWSEmail
}